### ✅ 1. **계층화 분류 (Layered Classification)**  
가장 일반적인 표현입니다.  
> 소프트웨어 또는 시스템을 **기능적 계층(Layer)**에 따라 분류하는 방법.

- 그래픽스의 경우:
  - **저수준 계층**: GPU 접근 API (OpenGL, DirectX)
  - **중간 계층**: 라이브러리/툴킷 (GLFW, SDL, ImGui)
  - **고수준 계층**: 프레임워크/엔진 (Unity, Unreal)

📌 이 방식은 **"소프트웨어 스택(software stack)"**이라는 말로도 표현됩니다.

---

### ✅ 2. **소프트웨어 아키텍처 관점의 분류**  
기술 도구들을 역할에 따라 **아키텍처 구성 요소(components)**로 분해하여 이해하는 방식입니다.

- 예: `API = 인터페이스 계층`, `엔진 = 비즈니스 로직 계층`, `런타임/플랫폼 = 인프라 계층`

---

### ✅ 3. **기능 기반 분류 (Function-based Classification)**  
각 도구나 기술이 수행하는 기능을 기준으로 분류하는 방식입니다.  
> 예: 렌더링 API, 입력 처리 라이브러리, GUI 툴킷, 게임 엔진 등

---

### ✅ 4. **추상화 수준에 따른 분류 (Abstraction-level Classification)**  
도구가 **얼마나 하드웨어에 가까운지 혹은 고수준 기능을 제공하는지**에 따라 나누는 방식입니다.

- 낮은 추상화 → 고성능/고복잡도 → OpenGL
- 높은 추상화 → 사용 편의성/낮은 자유도 → Unity

---

### 📌 요약하자면:

> **“그래픽스 기술의 API, 라이브러리, 프레임워크 등으로의 분류는 보통 ‘계층화 분류’, ‘추상화 수준에 따른 분류’, 또는 ‘소프트웨어 스택 관점의 분류’라고 부릅니다.”**
